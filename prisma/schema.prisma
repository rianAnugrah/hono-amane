generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         String        @id @default(uuid())
  email      String        @unique
  name       String?
  role       String?
  placement  String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  deletedAt  DateTime?
  locationId Int?
  versions   UserVersion[]
  location   LocationDesc? @relation(fields: [locationId], references: [id], onUpdate: NoAction)
}

model UserVersion {
  id         String        @id @default(uuid())
  userId     String
  name       String?
  role       String?
  placement  String?
  updatedAt  DateTime      @default(now())
  locationId Int?
  location   LocationDesc? @relation(fields: [locationId], references: [id], onUpdate: NoAction)
  user       Users         @relation(fields: [userId], references: [id])
}

model ProjectCode {
  id     Int     @id @default(autoincrement())
  code   String  @unique @db.VarChar(255)
  assets Asset[]
}

model LocationDesc {
  id          Int           @id @default(autoincrement())
  description String        @unique @db.VarChar(255)
  assets      Asset[]
  userVersion UserVersion[]
  users       Users[]
}

model DetailsLocation {
  id          Int     @id @default(autoincrement())
  description String  @unique @db.VarChar(255)
  assets      Asset[]
}

model Asset {
  id                 String           @id @default(uuid())
  assetNo            String
  lineNo             String
  assetName          String
  remark             String?
  condition          String
  pisDate            DateTime
  transDate          DateTime
  categoryCode       String
  afeNo              String?
  adjustedDepre      Float
  poNo               String?
  acqValueIdr        Float
  acqValue           Float
  accumDepre         Float
  ytdDepre           Float
  bookValue          Float
  taggingYear        String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deletedAt          DateTime?
  isLatest           Boolean          @default(true)
  parentId           String?
  version            Int              @default(1)
  projectCode_id     Int?
  locationDesc_id    Int?
  detailsLocation_id Int?
  detailsLocation    DetailsLocation? @relation(fields: [detailsLocation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_details_location")
  locationDesc       LocationDesc?    @relation(fields: [locationDesc_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_location_desc")
  projectCode        ProjectCode?     @relation(fields: [projectCode_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_project_code")

  @@index([assetNo, isLatest])
}

model Asset_Copy {
  id              String    @id
  projectCode     String
  assetNo         String
  lineNo          String
  assetName       String
  remark          String?
  locationDesc    String
  detailsLocation String?
  condition       String
  pisDate         DateTime
  transDate       DateTime
  categoryCode    String
  afeNo           String?
  adjustedDepre   Float
  poNo            String?
  acqValueIdr     Float
  acqValue        Float
  accumDepre      Float
  ytdDepre        Float
  bookValue       Float
  taggingYear     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  deletedAt       DateTime?
  isLatest        Boolean   @default(true)
  parentId        String?
  version         Int       @default(1)

  @@index([assetNo, isLatest])
}
