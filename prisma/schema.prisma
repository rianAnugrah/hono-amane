generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                String          @id @default(uuid())
  email             String          @unique
  name              String?
  role              String?
  placement         String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  auditUsers        AuditUser[]
  inspections       Inspection[]
  leadInspections   Inspection[]    @relation("InspectionLead")
  headInspections   Inspection[]    @relation("InspectionHead")
  userLocations     UserLocation[]
  UserSignature     UserSignature[]
}

model LocationDesc {
  id            Int            @id @default(autoincrement())
  description   String         @unique @db.VarChar(255)
  assets        Asset[]
  assetAudits   AssetAudit[]
  userLocations UserLocation[]
}

model UserLocation {
  userId     String
  locationId Int
  location   LocationDesc @relation(fields: [locationId], references: [id])
  user       Users        @relation(fields: [userId], references: [id])

  @@id([userId, locationId])
}

model ProjectCode {
  id     Int     @id @default(autoincrement())
  code   String  @unique @db.VarChar(255)
  assets Asset[]
}

model DetailsLocation {
  id          Int     @id @default(autoincrement())
  description String  @unique @db.VarChar(255)
  assets      Asset[]
}

model Asset {
  id                 String           @id @default(uuid())
  assetNo            String
  lineNo             String
  assetName          String
  remark             String?
  condition          String
  pisDate            DateTime
  transDate          DateTime
  categoryCode       String
  afeNo              String?
  adjustedDepre      Float
  poNo               String?
  acqValueIdr        Float
  acqValue           Float
  accumDepre         Float
  ytdDepre           Float
  bookValue          Float
  taggingYear        String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deletedAt          DateTime?
  isLatest           Boolean          @default(true)
  parentId           String?
  version            Int              @default(1)
  detailsLocation_id Int?
  images             String[]         @default([])
  locationDesc_id    Int?
  projectCode_id     Int?
  type               String?
  detailsLocation    DetailsLocation? @relation(fields: [detailsLocation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_details_location")
  locationDesc       LocationDesc?    @relation(fields: [locationDesc_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_location_desc")
  projectCode        ProjectCode?     @relation(fields: [projectCode_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_project_code")
  assetAudits        AssetAudit[]
  inspectionItems    InspectionItem[]

  @@index([assetNo, isLatest])
}

model Asset_Copy {
  id              String    @id
  projectCode     String
  assetNo         String
  lineNo          String
  assetName       String
  remark          String?
  locationDesc    String
  detailsLocation String?
  condition       String
  pisDate         DateTime
  transDate       DateTime
  categoryCode    String
  afeNo           String?
  adjustedDepre   Float
  poNo            String?
  acqValueIdr     Float
  acqValue        Float
  accumDepre      Float
  ytdDepre        Float
  bookValue       Float
  taggingYear     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  deletedAt       DateTime?
  isLatest        Boolean   @default(true)
  parentId        String?
  version         Int       @default(1)

  @@index([assetNo, isLatest])
}

model AssetAudit {
  id         String        @id @default(uuid())
  assetId    String
  checkDate  DateTime      @default(now())
  locationId Int?
  status     String
  remarks    String?
  images     String[]      @default([])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  asset      Asset         @relation(fields: [assetId], references: [id])
  location   LocationDesc? @relation(fields: [locationId], references: [id])
  auditUsers AuditUser[]

  @@index([assetId])
  @@index([checkDate])
}

model AuditUser {
  auditId String
  userId  String
  audit   AssetAudit @relation(fields: [auditId], references: [id])
  user    Users      @relation(fields: [userId], references: [id])

  @@id([auditId, userId])
}

model Inspection {
  id                       String           @id @default(uuid())
  inspector_id             String
  date                     DateTime         @default(now())
  notes                    String?
  status                   String           @default("pending")
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  lead_user_id             String?
  head_user_id             String?
  lead_signature_data      String?
  head_signature_data      String?
  lead_signature_timestamp DateTime?
  head_signature_timestamp DateTime?
  inspector                Users            @relation(fields: [inspector_id], references: [id])
  leadUser                 Users?           @relation("InspectionLead", fields: [lead_user_id], references: [id])
  headUser                 Users?           @relation("InspectionHead", fields: [head_user_id], references: [id])
  items                    InspectionItem[]
}

model InspectionItem {
  id           String     @id @default(uuid())
  inspectionId String
  assetId      String
  assetVersion Int
  status       String     @default("pending")
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  asset        Asset      @relation(fields: [assetId], references: [id])
  inspection   Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)

  @@index([inspectionId])
  @@index([assetId])
}

model UserSignature {
  id             String   @id
  user_id        String
  signature_data String
  is_active      Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  Users          Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([is_active])
  @@index([user_id])
}
